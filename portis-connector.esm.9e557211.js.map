{"mappings":"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","sources":["node_modules/@web3-react/portis-connector/src/index.ts","node_modules/@parcel/runtime-js/lib/runtime-27b92845cb08bba8.js"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  100: 'xdai',\n  30: 'orchid',\n  31: 'orchidTestnet',\n  99: 'core',\n  77: 'sokol',\n  61: 'classic',\n  8: 'ubiq',\n  108: 'thundercore',\n  18: 'thundercoreTestnet',\n  163: 'lightstreams',\n  122: 'fuse',\n  15001: 'maticTestnet'\n}\n\ntype Network = number | { chainId: string; [key: string]: any }\n\ninterface PortisConnectorArguments {\n  dAppId: string\n  networks: Network[]\n  config?: any\n}\n\nexport class PortisConnector extends AbstractConnector {\n  private readonly dAppId: string\n  private readonly networks: Network[]\n  private readonly config: any\n\n  public portis: any\n\n  constructor({ dAppId, networks, config = {} }: PortisConnectorArguments) {\n    const chainIds = networks.map((n): number => (typeof n === 'number' ? n : Number(n.chainId)))\n    invariant(\n      chainIds.every((c): boolean => !!chainIdToNetwork[c]),\n      `One or more unsupported networks ${networks}`\n    )\n    super({ supportedChainIds: chainIds })\n\n    this.dAppId = dAppId\n    this.networks = networks\n    this.config = config\n\n    this.handleOnLogout = this.handleOnLogout.bind(this)\n    this.handleOnActiveWalletChanged = this.handleOnActiveWalletChanged.bind(this)\n    this.handleOnError = this.handleOnError.bind(this)\n  }\n\n  private handleOnLogout(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onLogout' event\")\n    }\n    this.emitDeactivate()\n  }\n\n  private handleOnActiveWalletChanged(account: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onActiveWalletChanged' event with payload\", account)\n    }\n    this.emitUpdate({ account })\n  }\n\n  private handleOnError(error: Error): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onError' event\")\n    }\n    this.emitError(error)\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.portis) {\n      const Portis = await import('@portis/web3').then(m => m?.default ?? m)\n      this.portis = new Portis(\n        this.dAppId,\n        typeof this.networks[0] === 'number' ? chainIdToNetwork[this.networks[0]] : (this.networks[0] as any),\n        this.config\n      )\n    }\n\n    this.portis.onLogout(this.handleOnLogout)\n    this.portis.onActiveWalletChanged(this.handleOnActiveWalletChanged)\n    this.portis.onError(this.handleOnError)\n\n    const account = await this.portis.provider.enable().then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.portis.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.portis.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.portis.provider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.portis.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.portis.onLogout(() => {})\n    this.portis.onActiveWalletChanged(() => {})\n    this.portis.onError(() => {})\n  }\n\n  public async changeNetwork(newNetwork: number | Network, isGasRelayEnabled?: boolean) {\n    if (typeof newNetwork === 'number') {\n      invariant(!!chainIdToNetwork[newNetwork], `Invalid chainId ${newNetwork}`)\n      this.portis.changeNetwork(chainIdToNetwork[newNetwork], isGasRelayEnabled)\n      this.emitUpdate({ chainId: newNetwork })\n    } else {\n      this.portis.changeNetwork(newNetwork, isGasRelayEnabled)\n      this.emitUpdate({ chainId: Number(newNetwork.chainId) })\n    }\n  }\n\n  public async close() {\n    await this.portis.logout()\n    this.emitDeactivate()\n  }\n}\n","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"a7Oz7\"))).then(() => parcelRequire('e0RjO'));"],"names":["chainIdToNetwork","PortisConnector","_ref","dAppId","networks","config","chainIds","map","n","Number","chainId","every","c","invariant","_this","_AbstractConnector","call","this","supportedChainIds","handleOnLogout","bind","$14bc65fd3acd3f76$var$_assertThisInitialized","handleOnActiveWalletChanged","handleOnError","_proto","prototype","emitDeactivate","account","emitUpdate","error","emitError","activate","_this3","portis","onLogout","onActiveWalletChanged","onError","Promise","resolve","provider","enable","then","accounts","res","m","_m$default","parcelRequire","Portis","e","reject","getProvider","getChainId","send","getAccount","deactivate","changeNetwork","newNetwork","isGasRelayEnabled","_this11","close","_this13","logout","AbstractConnector","module","exports","import"],"version":3,"file":"portis-connector.esm.9e557211.js.map"}