{"mappings":"iwBAGA,IAUaA,EAAAA,SAAAA,oBASXA,EAAAC,SAAcC,EAAAA,EAAAA,IAAKC,EAAAA,EAAAA,QAASC,EAAAA,EAAAA,WAAYC,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,yBAChDC,EAAAC,EAAAC,KAAAC,KAAA,CAAQJ,kBAAmBA,WAEtBJ,IAAMA,EACXK,EAAKJ,QAAUA,EACfI,EAAKH,WAAaA,EAClBG,EAAKF,SAAWA,IAAY,EAE5BE,EAAKI,mBAAqBJ,EAAKI,mBAAmBC,KAAxBC,EAAAN,IAC1BA,EAAKO,sBAAwBP,EAAKO,sBAAsBF,KAA3BC,EAAAN,QAlBjCC,KAAAR,yEAAA,IAAAe,EAAAf,EAAAgB,iBAAAD,EAqBeE,SArBf,eAyBM,IAAAC,EAAAR,yBAWqBS,QAAAC,QAAAF,EAAKG,SAASC,QAAd,CACrBC,OAAM,yBADeC,MAAA,SAAjBC,GAGN,IAAMC,EAAUD,EAAS,UAEzBP,EAAKG,SAASM,GAAd,eAAiCT,EAAKP,oBACtCO,EAAKG,SAASM,GAAd,kBAAoCT,EAAKJ,wBAEhCO,SAAUH,EAAKG,SAAUK,QAASA,oBArBvCE,GAAAA,OAAOC,WAAiD,IAArCD,OAAOC,SAASC,iBAErCZ,EAAKG,SAAWO,OAAOC,+BACd,IAACX,EAAKa,WAAN,OACgBZ,QAAAC,QAAAY,IAAqBR,MAArB,SAA0BS,GAAC,IAAAC,SAAA,OAAAA,EAAA,MAAID,OAAJ,EAAIA,EAAC,SAALC,EAAkBD,MAA7CT,MAAA,kBAAAW,EAAA,6BAAnBC,GACNlB,EAAKa,WAAa,IAAIK,EAAtBC,EAAA,CACElC,QAASe,EAAKf,QACdE,SAAUa,EAAKb,UACXa,EAAKd,WAAL,CAAoBA,WAAYc,EAAKd,iBAE3Cc,EAAKG,SAAWH,EAAKa,WAAWO,iBAAiBpB,EAAKhB,IA3C3C,wGAUjB,MA6CGqC,UA7CHpB,QAAAqB,OAAAD,KAAAxB,EA+Ce0B,YA/Cf,sBAgDItB,QAAAC,QAAOV,KAAKW,UAhDhB,MAiDGkB,UAjDHpB,QAAAqB,OAAAD,KAAAxB,EAmDe2B,WAnDf,sBAoDIvB,QAAAC,QAAOV,KAAKW,SAASsB,SApDzB,MAqDGJ,UArDHpB,QAAAqB,OAAAD,KAAAxB,EAuDe6B,WAvDf,sBAwD2BzB,QAAAC,QAAAV,KAAKW,SAASC,QAAd,CACrBC,OAAM,yBADeC,MAAA,SAAjBC,UAGCA,EAAS,MA3DpB,MA4DGc,UA5DHpB,QAAAqB,OAAAD,KAAAxB,EA8DS8B,WA9DT,gBA+DSxB,SAASyB,eAAd,eAAApC,KAAkDC,yBAC7CU,SAASyB,eAAd,kBAAApC,KAAqDI,wBAhEzDC,EAmEegC,MAnEf,sBAoEIrC,KAAKW,SAAS0B,QAAdrC,KACKsC,mCArET,MAsEGT,UAtEHpB,QAAAqB,OAAAD,KAAAxB,EAwEUJ,mBAxEV,SAwE6BgC,QAIpBM,WAAL,CAAkBN,QAASA,KA5E/B5B,EA+EUD,sBA/EV,SA+EgCW,QAIvBwB,WAAL,CAAkBvB,QAASD,EAAS,MAnFxCzB,EAAaA,CAA4BkD,EAAAA,wDCbzCC,EAAAC,QAAiBjC,QAAQkC,IAAG,aAA4BlB,EAAA,SAAAf,QAA4C,sBAAsCe,EAAA,SAAAf,QAA4C,sBAAsCe,EAAA,SAAAf,QAA4C,YAAaI,MAAI,IAAOW,EAAa","sources":["node_modules/@web3-react/walletlink-connector/src/index.ts","node_modules/@parcel/runtime-js/lib/runtime-ac0150a12def704d.js"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\nconst CHAIN_ID = 1\n\ninterface WalletLinkConnectorArguments {\n  url: string\n  appName: string\n  appLogoUrl?: string\n  darkMode?: boolean\n  supportedChainIds?: number[]\n}\n\nexport class WalletLinkConnector extends AbstractConnector {\n  private readonly url: string\n  private readonly appName: string\n  private readonly appLogoUrl?: string\n  private readonly darkMode: boolean\n\n  public walletLink: any\n  private provider: any\n\n  constructor({ url, appName, appLogoUrl, darkMode, supportedChainIds }: WalletLinkConnectorArguments) {\n    super({ supportedChainIds: supportedChainIds })\n\n    this.url = url\n    this.appName = appName\n    this.appLogoUrl = appLogoUrl\n    this.darkMode = darkMode || false\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    // @ts-ignore\n    if (window.ethereum && window.ethereum.isCoinbaseWallet === true) {\n      // user is in the dapp browser on Coinbase Wallet\n      this.provider = window.ethereum\n    } else if (!this.walletLink) {\n      const WalletLink = await import('walletlink').then(m => m?.default ?? m)\n      this.walletLink = new WalletLink({\n        appName: this.appName,\n        darkMode: this.darkMode,\n        ...(this.appLogoUrl ? { appLogoUrl: this.appLogoUrl } : {})\n      })\n      this.provider = this.walletLink.makeWeb3Provider(this.url, CHAIN_ID)\n    }\n\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts'\n    })\n    const account = accounts[0]\n\n    this.provider.on('chainChanged', this.handleChainChanged)\n    this.provider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.provider, account: account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.provider.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts'\n    })\n    return accounts[0]\n  }\n\n  public deactivate() {\n    this.provider.removeListener('chainChanged', this.handleChainChanged)\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged)\n  }\n\n  public async close() {\n    this.provider.close()\n    this.emitDeactivate()\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId: chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n}\n","module.exports = Promise.all([__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"eEKhR\")), __parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"gnKUJ\")), __parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"f7ne0\"))]).then(() => parcelRequire('dkq4w'));"],"names":["WalletLinkConnector","_ref","url","appName","appLogoUrl","darkMode","supportedChainIds","_this","_AbstractConnector","call","this","handleChainChanged","bind","$697591c5d2ed3f70$var$_assertThisInitialized","handleAccountsChanged","_proto","prototype","activate","_this3","Promise","resolve","provider","request","method","then","accounts","account","on","window","ethereum","isCoinbaseWallet","walletLink","res","m","_m$default","parcelRequire","WalletLink","$697591c5d2ed3f70$var$_extends","makeWeb3Provider","e","reject","getProvider","getChainId","chainId","getAccount","deactivate","removeListener","close","emitDeactivate","emitUpdate","AbstractConnector","module","exports","all"],"version":3,"file":"walletlink-connector.esm.449ecc4c.js.map"}