{"mappings":"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","sources":["node_modules/@web3-react/walletconnect-connector/src/index.ts","node_modules/@parcel/runtime-js/lib/runtime-7665debca53aa477.js"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport { IWalletConnectProviderOptions } from '@walletconnect/types'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\nexport interface WalletConnectConnectorArguments extends IWalletConnectProviderOptions {\n  supportedChainIds?: number[]\n}\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nfunction getSupportedChains({ supportedChainIds, rpc }: WalletConnectConnectorArguments): number[] | undefined {\n  if (supportedChainIds) {\n    return supportedChainIds\n  }\n\n  return rpc ? Object.keys(rpc).map(k => Number(k)) : undefined\n}\n\nexport class WalletConnectConnector extends AbstractConnector {\n  private readonly config: WalletConnectConnectorArguments\n\n  public walletConnectProvider?: any\n\n  constructor(config: WalletConnectConnectorArguments) {\n    super({ supportedChainIds: getSupportedChains(config) })\n\n    this.config = config\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleDisconnect = this.handleDisconnect.bind(this)\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  private handleDisconnect(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'disconnect' event\")\n    }\n    this.emitDeactivate()\n    // we have to do this because of a @walletconnect/web3-provider bug\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider = undefined\n    }\n\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletConnectProvider) {\n      const WalletConnectProvider = await import('@walletconnect/web3-provider').then(m => m?.default ?? m)\n      this.walletConnectProvider = new WalletConnectProvider(this.config)\n    }\n\n    // ensure that the uri is going to be available, and emit an event if there's a new uri\n    if (!this.walletConnectProvider.wc.connected) {\n      await this.walletConnectProvider.wc.createSession({\n        chainId: this.supportedChainIds && this.supportedChainIds.length > 0 ? this.supportedChainIds[0] : 1\n      })\n      this.emit(URI_AVAILABLE, this.walletConnectProvider.wc.uri)\n    }\n\n    const account = await this.walletConnectProvider\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n      .catch((error: Error): void => {\n        // TODO ideally this would be a better check\n        if (error.message === 'User closed modal') {\n          throw new UserRejectedRequestError()\n        }\n\n        throw error\n      })\n\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.walletConnectProvider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.walletConnectProvider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.walletConnectProvider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.walletConnectProvider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n    }\n  }\n\n  public async close() {\n    await this.walletConnectProvider?.close()\n  }\n}\n","module.exports = Promise.all([__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"7sqgL\")), __parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"eEKhR\")), __parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"gnKUJ\")), __parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"hVYDZ\"))]).then(() => parcelRequire('hNdRM'));"],"names":["URI_AVAILABLE","UserRejectedRequestError","_this","_Error","call","this","name","constructor","message","$ab3192b610edb9de$var$_inheritsLoose","$ab3192b610edb9de$var$_wrapNativeSuper","Error","WalletConnectConnector","config","_ref","supportedChainIds","rpc","_this2","_AbstractConnector","Object","keys","map","k","Number","undefined","handleChainChanged","bind","$ab3192b610edb9de$var$_assertThisInitialized","handleAccountsChanged","handleDisconnect","_proto","prototype","chainId","emitUpdate","accounts","account","emitDeactivate","walletConnectProvider","stop","removeListener","activate","_this4","Promise","resolve","enable","then","error","on","provider","wc","connected","createSession","length","emit","uri","res","m","_m$default","parcelRequire","WalletConnectProvider","e","reject","getProvider","getChainId","send","getAccount","deactivate","close","_this12$walletConnect","AbstractConnector","module","exports","all"],"version":3,"file":"walletconnect-connector.esm.302bd98c.js.map"}